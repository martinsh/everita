AFRAME.registerShader('sphere_liepaja_ios', {
  schema: {
    timeMsec: {type:'time'},
  },
  
  uniforms: {
      // the texture value (once the texture source is loaded, update)
      //map: { type: 't', value: null },
      // texture parameters
      timeMsec: {type:'time', is:'uniform'},
  },

  init: function(data) {
      
      this.material = new THREE.ShaderMaterial({

          uniforms: this.uniforms,
          vertexShader: this.vertexShader,
          fragmentShader: this.fragmentShader
        
      });
  },
                               



  update: function (data) {
    //console.log(data.something)

      //AFRAME.utils.material.updateMap(this, data);
       this.uniforms.timeMsec.value = data.timeMsec;
       //this.uniforms.interpolate.value = (data.timeMsec%500.0)/500;
       //this.uniforms.something.value = data.something;
      //console.log(data.timeMsec)
      //console.log((data.timeMsec%500.0)/500)
    
      //if ((data.timeMsec%500.0)-this.timeBefore < 0.0){
      //  console.log('tick')
      //  setTimeout(animate,2000);
        //animate();
      //}
      //console.log(this.timeBefore, data.timeMsec, (data.timeMsec%500.0)-this.timeBefore )
      //this.timeBefore = (data.timeMsec%500.0);
     
   },

  
  vertexShader: `


varying vec3 p;


void main() {
  p = vec3(vec4(position,1.0));
  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

}

`,
  fragmentShader: `

//varying float noise;
varying vec3 p;
const float PI = 3.14159;
uniform float timeMsec;

float map(float value, float min1, float max1, float min2, float max2)
{
  // Convert the current value to a percentage
  // 0% - min1, 100% - max1
  float perc = (value - min1) / (max1 - min1);

  // Do the same operation backwards with min2 and max2
  return perc * (max2 - min2) + min2;
}

float chladni(vec3 pos, float k,float l,float m,float s,float L)
{

return cos(k*pos.x*PI/L)*(cos(l*pos.y*PI/L)*cos(m*pos.z*PI/L)+s*cos(m*pos.y*PI/L)*cos(l*pos.z*PI/L))+
       cos(l*pos.x*PI/L)*(cos(k*pos.y*PI/L)*cos(m*pos.z*PI/L)+s*cos(m*pos.y*PI/L)*cos(k*pos.z*PI/L))+
       cos(m*pos.x*PI/L)*(cos(k*pos.y*PI/L)*cos(l*pos.z*PI/L)+s*cos(l*pos.y*PI/L )*cos(k*pos.z*PI/L));// where k, l and m are integers, s=âˆ“ 1.
}


//float[] k = float[]{4.921, 5.3, 5.3, 4.446, 2.925, 5.046, 5.25, 5.592, 5.113, 5.088, 3.354, 5.508, 5.258, 4.725, 6.729, 6.258, 4.579, 4.533, 5.333, 4.746, 6.038, 5.167, 4.392, 5.808, 5.008, 5.1, 4.133, 2.113, 3.5, 4.4, 4.233, 5.554, 5.458, 3.675, 0.388, 1.471, 2.767, 0.608, 3.821, 4.775, 5.754, 4.196, 4.642, 4.65, 2.408, 2.213, 5.592, 7.242, 5.746, 4.929, 4.438, 4.329, 5.121, 5.15, 4.192, 1.704, 3.933, 3.021, 1.983, 3.354, 5.042, 5.283, 5.363, 5.417, 4.408, 4.133, 4.171, 3.546, 4.867, 5.342, 6.117, 5.742, 4.746, -0.029, 2.883, 4.629, 2.663, 5.867, 5.408, 4.633, 0.854, 0.175, -0.942, 2.642, 4.05, 2.996, 6.408, 5.561, 2.7, -0.358, 0.604, 5.033, 5.688, 5.583, 4.892, 5.067, 7.4, 8.213, 6.217, 6.913, 3.471, 3.854, 7.296, 6.188, 4.283, 6.454, 7.008, 5.688, 5.717, 5.871, 6.196, 7.442, 7.95, 7.046, 6.517, 6.321, 7.042, 7.571, 7.738, 5.642, 7.621, 10.288, 8.863, 7.133, 8.613, 10.846, 9.588, 8.142, 6.842, 8.679, 9.529, 7.833, 7.283, 6.883, 7.775, 8.517, 8.95, 8.504, 8.783, 9.267, 8.317, 8.654, 10.192, 10.925, 10.004, 10.808, 12.867, 10.996, 12.558, 11.638, 12.917, 15.792, 14.475, 14.017, 14.313, 14.479, 15.613, 12.533, 13.671, 13.579, 14.004, 17.138, 19.188, 19.188, 19.621, 19.633, 17.308, 14.417, 15.533, 16.108, 21.971, 21.975, 21.75, 21.238, 19.579, 17.271, 20.108, 22.075, 23.213, 22.363, 19.646, 19.158, 16.804, 16.675, 16.488, 16.454, 16.567, 16.888, 17.038, 15.446, 14.333, 15.054, 14.921, 15.408, 15.413, 15.517, 15.375, 15.333, 19.95, 19.625, 19.821, 20.854, 21.133, 17.896, 15.971, 16.392, 15.792, 17.354, 18.204, 18.313, 17.921, 17.746, 16.413, 17.038, 18.254, 15.854, 17.513, 16.929, 17.258, 17.746, 20.296, 22.45, 22.65, 20.363, 18.254, 17.038, 16.354, 16.917, 18.654, 17.883, 19.817, 19.896, 19.883, 20.454, 19.688, 20.433, 20.183, 18.725, 16.163, 15.129, 15.283, 14.583, 14.45, 17.754, 15.367, 14.508, 15.079, 16.113, 17.017, 16.596, 16.192, 14.404, 16.192, 16.617, 15.354, 13.32, 16.917, 15.929, 16.804, 16.833, 17.3, 12.45, 13.854, 14.788, 11.217, 15.392, 15.954, 16.238, 17.463, 17.654, 19.842, 19.158, 14.025, 11.517, 12.413, 13.75, 13.075, 13.183, 13.183, 17.592, 15.588, 14.788, 13.104, 12.221, 12.704, 10.721, 11.621, 8.35, 8.225, 5.742, 8.575, 5.963, 4.833, 8.392, 8.658, 8.554, 9.763, 13.004, 12.683, 11.492, 11.817, 11.188, 12.117, 11.05, 10.158, 8.554, 6.842, 8.638, 9.1, 12.525, 11.188, 10.629, 11.417, 10.658, 9.279, 5.708, 7.383, 3.983, 4.917, 4.871, 5.271, 6.9, 8.938, 9.45, 11.117, 9.946, 5.633, 6.408, 9.138, 8.6, 8.221, 9.254, 8.292, 5.279, 2.738, 1.596, 1.675, 1.1, -2.163, -1.221, 1.95, 5.746, 4.471, 1.013, -2.118, -3.46, -3.129, -0.671, 1.025, -1.45, 6.042};
//float[] l = float[]{26.042, 29.583, 38.75, 27.917, 23.958, 25.313, 22.918, 40.625, 22.917, 14.375, 22.5, 43.75, 17.292, 28.75, 39.583, 32.708, 22.292, 32.083, 23.542, 27.5, 33.125, 26.458, 25.417, 35.208, 18.125, 29.375, 18.125, 20.833, 19.583, 20.0, 11.875, 24.375, 33.333, 17.5, 14.375, 21.042, 21.667, 13.333, 22.708, 31.957, 49.167, 32.917, 34.583, 32.708, 34.583, 32.708, 10.625, 25.417, 42.5, 47.917, 40.0, 33.75, 17.083, 28.958, 49.583, 45.87, 20.625, 18.958, 38.542, 21.667, 10.625, 20.208, 26.25, 15.417, 11.042, 27.708, 20.833, 11.458, 13.33, 12.292, 17.917, 22.292, 39.975, 46.042, 37.708, 26.458, 30.833, 29.375, 17.5, 32.083, 20.979, 17.0, 22.479, 16.333, 8.458, 21.042, 23.021, 11.792, 9.896, 10.065, 27.696, 15.125, 20.063, 30.229, 38.875, 41.875, 24.708, 15.875, 14.375, 22.958, 15.896, 16.813, 9.771, 11.813, 32.854, 25.188, 25.271, 20.146, 17.458, 21.229, 12.604, 15.229, 12.167, 13.271, 15.063, 17.854, 13.354, 15.063, 17.584, 13.354, 7.833, 13.333, 18.0, 12.521, 17.5, 8.208, 14.25, 16.875, 11.438, 16.333, 13.479, 18.604, 9.979, 12.604, 19.458, 21.0, 32.958, 20.979, 28.708, 39.604, 34.146, 20.521, 16.771, 16.542, 23.667, 17.813, 16.646, 12.458, 12.604, 14.125, 13.604, 17.271, 20.208, 18.708, 25.458, 15.958, 16.125, 13.521, 11.886, 14.563, 23.25, 10.271, 14.208, 13.438, 14.0, 15.917, 21.208, 23.5, 19.75, 11.345, 12.146, 11.563, 16.063, 12.021, 10.521, 11.042, 13.167, 9.75, 10.042, 9.708, 8.625, 8.146, 21.792, 30.188, 18.979, 12.354, 22.042, 29.854, 25.646, 19.521, 9.271, 32.354, 21.271, 15.042, 12.563, 7.792, 11.354, 10.083, 9.313, 8.25, 12.125, 22.146, 22.958, 21.25, 24.479, 16.792, 10.438, 10.208, 11.354, 23.854, 38.792, 26.333, 14.833, 10.896, 9.104, 9.125, 14.167, 8.271, 8.25, 8.583, 15.104, 15.125, 12.0, 10.875, 7.271, 6.708, 8.125, 8.125, 11.021, 11.396, 7.771, 8.438, 14.896, 21.396, 24.771, 11.979, 11.292, 13.458, 6.333, 15.104, 17.542, 11.25, 11.646, 17.542, 14.042, 22.521, 19.375, 15.833, 29.271, 28.438, 24.042, 16.25, 28.792, 32.521, 26.292, 11.542, 15.167, 29.333, 20.479, 9.688, 10.313, 19.563, 17.792, 13.771, 11.521, 9.771, 17.938, 20.438, 12.333, 7.542, 11.979, 14.25, 15.625, 22.313, 23.063, 14.438, 26.438, 13.75, 15.688, 20.021, 12.292, 12.333, 10.458, 9.5, 27.417, 18.75, 8.417, 6.396, 24.167, 27.167, 13.083, 15.813, 33.229, 28.0, 17.875, 15.25, 16.104, 15.396, 23.646, 12.523, 9.188, 75.0, 16.896, 24.104, 29.104, 28.583, 36.958, 14.708, 21.646, 13.688, 8.104, 4.833, 9.646, 12.771, 16.0, 13.125, 15.792, 19.563, 22.043, 36.0, 42.548, 28.083, 33.604, 39.5, 32.604, 27.375, 22.604, 25.813, 17.792, 17.208, 11.292, 8.979, 15.542, 16.729, 19.958, 23.542, 22.375, 25.771, 26.083, 25.646, 18.104, 18.146, 15.75, 17.854, 12.667, 11.708, 18.0, 18.313, 17.292, 22.729, 21.833};
//float[] m = float[]{87.917, 89.625, 73.458, 64.542, 94.542, 92.5, 93.208, 87.125, 99.083, 86.458, 92.25, 92.833, 79.625, 87.75, 86.917, 85.375, 85.583, 88.375, 89.0, 91.083, 72.542, 79.583, 93.667, 85.917, 89.333, 91.833, 94.583, 91.208, 91.375, 93.25, 97.25, 88.5, 76.625, 83.833, 74.75, 74.958, 67.833, 88.417, 85.75, 87.208, 84.333, 84.542, 77.333, 92.417, 93.708, 84.542, 92.417, 93.708, 84.875, 76.708, 83.958, 88.833, 86.625, 86.042, 89.292, 78.375, 75.958, 93.417, 82.375, 88.208, 84.292, 76.125, 86.875, 88.583, 95.833, 92.667, 90.125, 75.333, 84.208, 86.125, 73.958, 89.958, 85.25, 83.917, 84.083, 64.917, 58.292, 79.042, 91.708, 91.5, 82.375, 82.875, 64.042, 60.417, 62.917, 65.5, 71.125, 66.0, 47.625, 56.13, 56.913, 72.75, 68.292, 84.25, 83.875, 73.75, 74.667, 87.792, 61.417, 64.542, 83.125, 75.708, 85.75, 86.833, 70.833, 72.958, 64.458, 80.667, 76.0, 68.125, 68.333, 67.875, 80.042, 76.5, 72.458, 83.375, 84.667, 69.583, 75.25, 61.375, 77.917, 67.75, 61.0, 66.75, 94.417, 96.583, 86.583, 75.167, 71.167, 75.292, 76.75, 83.417, 72.708, 76.167, 61.042, 68.0, 65.958, 80.583, 83.25, 79.208, 80.042, 85.25, 73.917, 64.833, 93.458, 84.417, 70.917, 85.083, 74.5, 70.083, 69.042, 50.417, 63.33, 57.458, 57.583, 68.75, 68.875, 83.333, 80.0, 92.042, 78.833, 83.833, 86.083, 85.333, 63.375, 56.25, 87.958, 81.625, 77.958, 70.25, 78.167, 80.792, 84.25, 83.75, 88.542, 64.458, 60.583, 60.042, 73.0, 89.125, 91.792, 83.208, 82.875, 88.083, 76.25, 85.125, 96.583, 77.083, 76.958, 74.542, 74.875, 86.375, 80.375, 77.042, 81.333, 85.0, 78.375, 63.833, 61.625, 68.708, 69.042, 73.708, 77.0, 74.75, 69.667, 81.792, 82.833, 77.042, 83.125, 83.958, 76.125, 78.625, 84.375, 78.792, 83.667, 76.125, 78.625, 84.375, 78.792, 83.667, 89.125, 90.25, 76.042, 81.792, 68.833, 65.708, 71.792, 76.542, 70.292, 78.417, 81.625, 75.0, 85.333, 77.333, 62.208, 67.917, 80.167, 88.625, 86.708, 82.0, 71.375, 77.083, 89.333, 85.333, 75.583, 90.458, 79.083, 82.583, 74.958, 85.542, 88.0, 86.25, 85.25, 71.708, 78.458, 80.833, 82.583, 71.458, 72.708, 72.542, 74.583, 89.625, 91.792, 89.0, 71.0, 64.75, 78.125, 86.167, 81.917, 82.0, 81.5, 81.958, 86.0, 70.917, 65.958, 85.167, 85.375, 85.167, 79.292, 79.208, 89.417, 78.958, 84.548, 85.625, 86.292, 90.25, 84.833, 88.917, 74.25, 88.5, 86.583, 83.208, 87.042, 86.792, 79.125, 70.125, 54.5, 64.333, 90.958, 89.542, 84.917, 85.667, 87.875, 89.917, 90.583, 82.625, 92.455, 92.875, 95.375, 80.792, 93.458, 86.333, 76.708, 78.875, 91.667, 95.75, 87.792, 92.0, 85.375, 90.25, 86.833, 91.458, 90.708, 93.417, 88.917, 92.739, 94.75, 80.958, 59.125, 69.542, 79.417, 71.75, 81.583, 90.625, 87.333, 83.208, 86.042, 88.548, 91.542, 88.875, 86.458, 84.375, 82.167, 82.917, 85.75, 59.042, 69.625, 80.667, 82.625, 85.542, 92.25};
//float[] S = float[]{1019.563, 1016.183, 1008.575, 1001.025, 1020.625, 1019.533, 1019.729, 1019.729, 1013.917, 1014.013, 1007.975, 1019.917, 1011.304, 1011.971, 1011.442, 1008.308, 1018.013, 1024.167, 1015.838, 1025.129, 1033.629, 1022.496, 1016.413, 1021.85, 1010.158, 1010.438, 1013.025, 1010.213, 998.392, 991.458, 997.475, 993.617, 993.738, 988.542, 997.3, 1001.233, 1017.2, 1015.304, 1027.154, 1022.238, 1009.183, 977.85, 980.913, 988.717, 1001.45, 1014.542, 1019.738, 1005.283, 999.175, 1004.592, 1005.138, 1013.138, 1008.288, 1003.171, 1003.17, 993.883, 1002.4, 994.246, 984.767, 988.929, 1000.813, 1001.979, 993.108, 996.967, 1000.183, 1001.663, 1004.8, 1004.867, 1007.092, 1014.663, 1011.646, 1004.967, 991.554, 990.792, 997.046, 1004.867, 1007.092, 1014.663, 1011.646, 1004.967, 991.554, 990.792, 997.046, 1015.288, 1022.429, 1014.988, 1022.358, 1017.4, 1018.529, 1022.108, 1029.108, 1038.583, 1036.179, 1034.692, 1029.596, 1019.604, 1019.561, 1020.625, 1022.213, 1008.067, 998.421, 995.717, 1016.896, 1031.083, 1031.238, 1025.342, 1028.258, 1015.704, 1022.167, 1025.9, 1013.763, 1001.142, 1007.9, 1006.483, 1003.704, 1012.875, 1017.75, 1020.683, 1026.679, 1028.829, 1019.708, 1005.788, 1004.338, 1006.892, 1009.504, 1002.829, 1007.358, 1010.221, 1004.888, 1003.075, 1008.817, 1013.825, 1012.438, 1012.829, 1014.188, 1014.4, 1012.829, 1010.596, 1001.783, 1006.492, 1007.729, 1012.629, 1010.967, 1008.146, 1009.125, 1012.217, 1012.246, 1019.496, 1022.608, 1023.608, 1021.013, 1016.6, 1022.0, 1030.929, 1028.346, 1025.492, 1026.421, 1022.196, 1021.975, 1022.65, 1016.596, 1009.021, 1002.608, 996.592, 999.725, 1009.154, 1009.742, 1015.496, 1013.054, 1014.713, 1018.521, 1018.867, 1013.688, 1013.288, 1014.096, 1010.867, 1010.996, 1011.904, 1014.646, 1015.196, 1018.721, 1024.771, 1026.425, 1022.417, 1013.267, 1009.663, 1008.338, 1002.063, 1002.029, 1005.263, 1010.904, 1011.313, 1005.388, 1002.988, 1007.767, 1009.054, 1012.429, 1008.775, 1011.383, 1018.842, 1018.346, 1016.567, 1013.763, 1011.654, 1016.65, 1020.304, 1018.529, 1012.9, 1012.483, 1012.413, 1011.183, 1007.938, 1008.304, 1013.904, 1015.938, 1011.246, 1009.663, 1010.308, 1010.125, 1015.483, 1013.583, 1009.624, 1009.358, 1009.358, 1017.154, 1024.254, 1026.983, 1024.0, 1020.188, 1020.482, 1023.179, 1023.25, 1019.013, 1016.496, 1016.817, 1016.654, 1014.45, 1011.25, 1008.838, 1010.804, 1014.396, 1011.179, 1008.588, 1008.225, 1008.225, 1008.225, 1008.246, 1003.063, 1002.458, 1009.129, 1005.246, 1007.946, 1009.971, 1017.071, 1016.867, 1014.733, 1014.95, 1012.183, 1011.804, 1015.617, 1013.962, 1012.221, 1009.104, 1016.617, 1014.771, 1016.854, 1021.254, 1023.313, 1013.913, 1018.221, 1023.863, 1022.538, 1023.067, 1017.163, 1012.767, 1007.063, 1004.533, 1003.3, 1000.2, 1006.533, 1013.996, 1017.993, 1017.229, 1012.421, 1012.979, 1011.154, 1002.529, 1007.067, 1013.133, 1012.038, 1015.288, 1015.775, 1015.025, 1015.421, 1013.171, 1013.738, 1019.042, 1018.154, 1004.046, 1011.104, 1018.629, 1009.263, 1002.808, 1005.204, 1007.208, 1010.433, 1007.642, 1006.825, 1009.5, 1008.925, 1011.533, 1022.521, 1019.167, 1009.533, 1014.092, 1020.863, 1021.125, 1022.55, 1025.075, 1023.504, 1029.742, 1032.621, 1031.175, 1025.921, 1021.621, 1019.404, 1017.292, 1013.45, 1016.846, 1016.367, 1004.658, 1015.283, 1022.408, 1007.658, 1008.788, 1014.85, 1016.088, 1012.038, 1013.796, 1022.488, 1024.367, 1019.313, 1022.121, 1026.867, 1016.786, 1008.154, 1010.258, 1016.529, 1016.654, 1019.213, 1022.054};

void main() {

float k[351];
float l[351];
float m[351];
float S[351];

k[0]=4.921; k[1]=5.3; k[2]=5.3; k[3]=4.446; k[4]=2.925; k[5]=5.046; k[6]=5.25; k[7]=5.592; k[8]=5.113; k[9]=5.088; k[10]=3.354; k[11]=5.508; k[12]=5.258; k[13]=4.725; k[14]=6.729; k[15]=6.258; k[16]=4.579; k[17]=4.533; k[18]=5.333; k[19]=4.746; k[20]=6.038; k[21]=5.167; k[22]=4.392; k[23]=5.808; k[24]=5.008; k[25]=5.1; k[26]=4.133; k[27]=2.113; k[28]=3.5; k[29]=4.4; k[30]=4.233; k[31]=5.554; k[32]=5.458; k[33]=3.675; k[34]=0.388; k[35]=1.471; k[36]=2.767; k[37]=0.608; k[38]=3.821; k[39]=4.775; k[40]=5.754; k[41]=4.196; k[42]=4.642; k[43]=4.65; k[44]=2.408; k[45]=2.213; k[46]=5.592; k[47]=7.242; k[48]=5.746; k[49]=4.929; k[50]=4.438; k[51]=4.329; k[52]=5.121; k[53]=5.15; k[54]=4.192; k[55]=1.704; k[56]=3.933; k[57]=3.021; k[58]=1.983; k[59]=3.354; k[60]=5.042; k[61]=5.283; k[62]=5.363; k[63]=5.417; k[64]=4.408; k[65]=4.133; k[66]=4.171; k[67]=3.546; k[68]=4.867; k[69]=5.342; k[70]=6.117; k[71]=5.742; k[72]=4.746; k[73]=-0.029; k[74]=2.883; k[75]=4.629; k[76]=2.663; k[77]=5.867; k[78]=5.408; k[79]=4.633; k[80]=0.854; k[81]=0.175; k[82]=-0.942; k[83]=2.642; k[84]=4.05; k[85]=2.996; k[86]=6.408; k[87]=5.561; k[88]=2.7; k[89]=-0.358; k[90]=0.604; k[91]=5.033; k[92]=5.688; k[93]=5.583; k[94]=4.892; k[95]=5.067; k[96]=7.4; k[97]=8.213; k[98]=6.217; k[99]=6.913; k[100]=3.471; k[101]=3.854; k[102]=7.296; k[103]=6.188; k[104]=4.283; k[105]=6.454; k[106]=7.008; k[107]=5.688; k[108]=5.717; k[109]=5.871; k[110]=6.196; k[111]=7.442; k[112]=7.95; k[113]=7.046; k[114]=6.517; k[115]=6.321; k[116]=7.042; k[117]=7.571; k[118]=7.738; k[119]=5.642; k[120]=7.621; k[121]=10.288; k[122]=8.863; k[123]=7.133; k[124]=8.613; k[125]=10.846; k[126]=9.588; k[127]=8.142; k[128]=6.842; k[129]=8.679; k[130]=9.529; k[131]=7.833; k[132]=7.283; k[133]=6.883; k[134]=7.775; k[135]=8.517; k[136]=8.95; k[137]=8.504; k[138]=8.783; k[139]=9.267; k[140]=8.317; k[141]=8.654; k[142]=10.192; k[143]=10.925; k[144]=10.004; k[145]=10.808; k[146]=12.867; k[147]=10.996; k[148]=12.558; k[149]=11.638; k[150]=12.917; k[151]=15.792; k[152]=14.475; k[153]=14.017; k[154]=14.313; k[155]=14.479; k[156]=15.613; k[157]=12.533; k[158]=13.671; k[159]=13.579; k[160]=14.004; k[161]=17.138; k[162]=19.188; k[163]=19.188; k[164]=19.621; k[165]=19.633; k[166]=17.308; k[167]=14.417; k[168]=15.533; k[169]=16.108; k[170]=21.971; k[171]=21.975; k[172]=21.75; k[173]=21.238; k[174]=19.579; k[175]=17.271; k[176]=20.108; k[177]=22.075; k[178]=23.213; k[179]=22.363; k[180]=19.646; k[181]=19.158; k[182]=16.804; k[183]=16.675; k[184]=16.488; k[185]=16.454; k[186]=16.567; k[187]=16.888; k[188]=17.038; k[189]=15.446; k[190]=14.333; k[191]=15.054; k[192]=14.921; k[193]=15.408; k[194]=15.413; k[195]=15.517; k[196]=15.375; k[197]=15.333; k[198]=19.95; k[199]=19.625; k[200]=19.821; k[201]=20.854; k[202]=21.133; k[203]=17.896; k[204]=15.971; k[205]=16.392; k[206]=15.792; k[207]=17.354; k[208]=18.204; k[209]=18.313; k[210]=17.921; k[211]=17.746; k[212]=16.413; k[213]=17.038; k[214]=18.254; k[215]=15.854; k[216]=17.513; k[217]=16.929; k[218]=17.258; k[219]=17.746; k[220]=20.296; k[221]=22.45; k[222]=22.65; k[223]=20.363; k[224]=18.254; k[225]=17.038; k[226]=16.354; k[227]=16.917; k[228]=18.654; k[229]=17.883; k[230]=19.817; k[231]=19.896; k[232]=19.883; k[233]=20.454; k[234]=19.688; k[235]=20.433; k[236]=20.183; k[237]=18.725; k[238]=16.163; k[239]=15.129; k[240]=15.283; k[241]=14.583; k[242]=14.45; k[243]=17.754; k[244]=15.367; k[245]=14.508; k[246]=15.079; k[247]=16.113; k[248]=17.017; k[249]=16.596; k[250]=16.192; k[251]=14.404; k[252]=16.192; k[253]=16.617; k[254]=15.354; k[255]=13.32; k[256]=16.917; k[257]=15.929; k[258]=16.804; k[259]=16.833; k[260]=17.3; k[261]=12.45; k[262]=13.854; k[263]=14.788; k[264]=11.217; k[265]=15.392; k[266]=15.954; k[267]=16.238; k[268]=17.463; k[269]=17.654; k[270]=19.842; k[271]=19.158; k[272]=14.025; k[273]=11.517; k[274]=12.413; k[275]=13.75; k[276]=13.075; k[277]=13.183; k[278]=13.183; k[279]=17.592; k[280]=15.588; k[281]=14.788; k[282]=13.104; k[283]=12.221; k[284]=12.704; k[285]=10.721; k[286]=11.621; k[287]=8.35; k[288]=8.225; k[289]=5.742; k[290]=8.575; k[291]=5.963; k[292]=4.833; k[293]=8.392; k[294]=8.658; k[295]=8.554; k[296]=9.763; k[297]=13.004; k[298]=12.683; k[299]=11.492; k[300]=11.817; k[301]=11.188; k[302]=12.117; k[303]=11.05; k[304]=10.158; k[305]=8.554; k[306]=6.842; k[307]=8.638; k[308]=9.1; k[309]=12.525; k[310]=11.188; k[311]=10.629; k[312]=11.417; k[313]=10.658; k[314]=9.279; k[315]=5.708; k[316]=7.383; k[317]=3.983; k[318]=4.917; k[319]=4.871; k[320]=5.271; k[321]=6.9; k[322]=8.938; k[323]=9.45; k[324]=11.117; k[325]=9.946; k[326]=5.633; k[327]=6.408; k[328]=9.138; k[329]=8.6; k[330]=8.221; k[331]=9.254; k[332]=8.292; k[333]=5.279; k[334]=2.738; k[335]=1.596; k[336]=1.675; k[337]=1.1; k[338]=-2.163; k[339]=-1.221; k[340]=1.95; k[341]=5.746; k[342]=4.471; k[343]=1.013; k[344]=-2.118; k[345]=-3.46; k[346]=-3.129; k[347]=-0.671; k[348]=1.025; k[349]=-1.45; k[350]=6.042;
l[0]=26.042; l[1]=29.583; l[2]=38.75; l[3]=27.917; l[4]=23.958; l[5]=25.313; l[6]=22.918; l[7]=40.625; l[8]=22.917; l[9]=14.375; l[10]=22.5; l[11]=43.75; l[12]=17.292; l[13]=28.75; l[14]=39.583; l[15]=32.708; l[16]=22.292; l[17]=32.083; l[18]=23.542; l[19]=27.5; l[20]=33.125; l[21]=26.458; l[22]=25.417; l[23]=35.208; l[24]=18.125; l[25]=29.375; l[26]=18.125; l[27]=20.833; l[28]=19.583; l[29]=20.0; l[30]=11.875; l[31]=24.375; l[32]=33.333; l[33]=17.5; l[34]=14.375; l[35]=21.042; l[36]=21.667; l[37]=13.333; l[38]=22.708; l[39]=31.957; l[40]=49.167; l[41]=32.917; l[42]=34.583; l[43]=32.708; l[44]=34.583; l[45]=32.708; l[46]=10.625; l[47]=25.417; l[48]=42.5; l[49]=47.917; l[50]=40.0; l[51]=33.75; l[52]=17.083; l[53]=28.958; l[54]=49.583; l[55]=45.87; l[56]=20.625; l[57]=18.958; l[58]=38.542; l[59]=21.667; l[60]=10.625; l[61]=20.208; l[62]=26.25; l[63]=15.417; l[64]=11.042; l[65]=27.708; l[66]=20.833; l[67]=11.458; l[68]=13.33; l[69]=12.292; l[70]=17.917; l[71]=22.292; l[72]=39.975; l[73]=46.042; l[74]=37.708; l[75]=26.458; l[76]=30.833; l[77]=29.375; l[78]=17.5; l[79]=32.083; l[80]=20.979; l[81]=17.0; l[82]=22.479; l[83]=16.333; l[84]=8.458; l[85]=21.042; l[86]=23.021; l[87]=11.792; l[88]=9.896; l[89]=10.065; l[90]=27.696; l[91]=15.125; l[92]=20.063; l[93]=30.229; l[94]=38.875; l[95]=41.875; l[96]=24.708; l[97]=15.875; l[98]=14.375; l[99]=22.958; l[100]=15.896; l[101]=16.813; l[102]=9.771; l[103]=11.813; l[104]=32.854; l[105]=25.188; l[106]=25.271; l[107]=20.146; l[108]=17.458; l[109]=21.229; l[110]=12.604; l[111]=15.229; l[112]=12.167; l[113]=13.271; l[114]=15.063; l[115]=17.854; l[116]=13.354; l[117]=15.063; l[118]=17.584; l[119]=13.354; l[120]=7.833; l[121]=13.333; l[122]=18.0; l[123]=12.521; l[124]=17.5; l[125]=8.208; l[126]=14.25; l[127]=16.875; l[128]=11.438; l[129]=16.333; l[130]=13.479; l[131]=18.604; l[132]=9.979; l[133]=12.604; l[134]=19.458; l[135]=21.0; l[136]=32.958; l[137]=20.979; l[138]=28.708; l[139]=39.604; l[140]=34.146; l[141]=20.521; l[142]=16.771; l[143]=16.542; l[144]=23.667; l[145]=17.813; l[146]=16.646; l[147]=12.458; l[148]=12.604; l[149]=14.125; l[150]=13.604; l[151]=17.271; l[152]=20.208; l[153]=18.708; l[154]=25.458; l[155]=15.958; l[156]=16.125; l[157]=13.521; l[158]=11.886; l[159]=14.563; l[160]=23.25; l[161]=10.271; l[162]=14.208; l[163]=13.438; l[164]=14.0; l[165]=15.917; l[166]=21.208; l[167]=23.5; l[168]=19.75; l[169]=11.345; l[170]=12.146; l[171]=11.563; l[172]=16.063; l[173]=12.021; l[174]=10.521; l[175]=11.042; l[176]=13.167; l[177]=9.75; l[178]=10.042; l[179]=9.708; l[180]=8.625; l[181]=8.146; l[182]=21.792; l[183]=30.188; l[184]=18.979; l[185]=12.354; l[186]=22.042; l[187]=29.854; l[188]=25.646; l[189]=19.521; l[190]=9.271; l[191]=32.354; l[192]=21.271; l[193]=15.042; l[194]=12.563; l[195]=7.792; l[196]=11.354; l[197]=10.083; l[198]=9.313; l[199]=8.25; l[200]=12.125; l[201]=22.146; l[202]=22.958; l[203]=21.25; l[204]=24.479; l[205]=16.792; l[206]=10.438; l[207]=10.208; l[208]=11.354; l[209]=23.854; l[210]=38.792; l[211]=26.333; l[212]=14.833; l[213]=10.896; l[214]=9.104; l[215]=9.125; l[216]=14.167; l[217]=8.271; l[218]=8.25; l[219]=8.583; l[220]=15.104; l[221]=15.125; l[222]=12.0; l[223]=10.875; l[224]=7.271; l[225]=6.708; l[226]=8.125; l[227]=8.125; l[228]=11.021; l[229]=11.396; l[230]=7.771; l[231]=8.438; l[232]=14.896; l[233]=21.396; l[234]=24.771; l[235]=11.979; l[236]=11.292; l[237]=13.458; l[238]=6.333; l[239]=15.104; l[240]=17.542; l[241]=11.25; l[242]=11.646; l[243]=17.542; l[244]=14.042; l[245]=22.521; l[246]=19.375; l[247]=15.833; l[248]=29.271; l[249]=28.438; l[250]=24.042; l[251]=16.25; l[252]=28.792; l[253]=32.521; l[254]=26.292; l[255]=11.542; l[256]=15.167; l[257]=29.333; l[258]=20.479; l[259]=9.688; l[260]=10.313; l[261]=19.563; l[262]=17.792; l[263]=13.771; l[264]=11.521; l[265]=9.771; l[266]=17.938; l[267]=20.438; l[268]=12.333; l[269]=7.542; l[270]=11.979; l[271]=14.25; l[272]=15.625; l[273]=22.313; l[274]=23.063; l[275]=14.438; l[276]=26.438; l[277]=13.75; l[278]=15.688; l[279]=20.021; l[280]=12.292; l[281]=12.333; l[282]=10.458; l[283]=9.5; l[284]=27.417; l[285]=18.75; l[286]=8.417; l[287]=6.396; l[288]=24.167; l[289]=27.167; l[290]=13.083; l[291]=15.813; l[292]=33.229; l[293]=28.0; l[294]=17.875; l[295]=15.25; l[296]=16.104; l[297]=15.396; l[298]=23.646; l[299]=12.523; l[300]=9.188; l[301]=75.0; l[302]=16.896; l[303]=24.104; l[304]=29.104; l[305]=28.583; l[306]=36.958; l[307]=14.708; l[308]=21.646; l[309]=13.688; l[310]=8.104; l[311]=4.833; l[312]=9.646; l[313]=12.771; l[314]=16.0; l[315]=13.125; l[316]=15.792; l[317]=19.563; l[318]=22.043; l[319]=36.0; l[320]=42.548; l[321]=28.083; l[322]=33.604; l[323]=39.5; l[324]=32.604; l[325]=27.375; l[326]=22.604; l[327]=25.813; l[328]=17.792; l[329]=17.208; l[330]=11.292; l[331]=8.979; l[332]=15.542; l[333]=16.729; l[334]=19.958; l[335]=23.542; l[336]=22.375; l[337]=25.771; l[338]=26.083; l[339]=25.646; l[340]=18.104; l[341]=18.146; l[342]=15.75; l[343]=17.854; l[344]=12.667; l[345]=11.708; l[346]=18.0; l[347]=18.313; l[348]=17.292; l[349]=22.729; l[350]=21.833; 
m[0]=87.917; m[1]=89.625; m[2]=73.458; m[3]=64.542; m[4]=94.542; m[5]=92.5; m[6]=93.208; m[7]=87.125; m[8]=99.083; m[9]=86.458; m[10]=92.25; m[11]=92.833; m[12]=79.625; m[13]=87.75; m[14]=86.917; m[15]=85.375; m[16]=85.583; m[17]=88.375; m[18]=89.0; m[19]=91.083; m[20]=72.542; m[21]=79.583; m[22]=93.667; m[23]=85.917; m[24]=89.333; m[25]=91.833; m[26]=94.583; m[27]=91.208; m[28]=91.375; m[29]=93.25; m[30]=97.25; m[31]=88.5; m[32]=76.625; m[33]=83.833; m[34]=74.75; m[35]=74.958; m[36]=67.833; m[37]=88.417; m[38]=85.75; m[39]=87.208; m[40]=84.333; m[41]=84.542; m[42]=77.333; m[43]=92.417; m[44]=93.708; m[45]=84.542; m[46]=92.417; m[47]=93.708; m[48]=84.875; m[49]=76.708; m[50]=83.958; m[51]=88.833; m[52]=86.625; m[53]=86.042; m[54]=89.292; m[55]=78.375; m[56]=75.958; m[57]=93.417; m[58]=82.375; m[59]=88.208; m[60]=84.292; m[61]=76.125; m[62]=86.875; m[63]=88.583; m[64]=95.833; m[65]=92.667; m[66]=90.125; m[67]=75.333; m[68]=84.208; m[69]=86.125; m[70]=73.958; m[71]=89.958; m[72]=85.25; m[73]=83.917; m[74]=84.083; m[75]=64.917; m[76]=58.292; m[77]=79.042; m[78]=91.708; m[79]=91.5; m[80]=82.375; m[81]=82.875; m[82]=64.042; m[83]=60.417; m[84]=62.917; m[85]=65.5; m[86]=71.125; m[87]=66.0; m[88]=47.625; m[89]=56.13; m[90]=56.913; m[91]=72.75; m[92]=68.292; m[93]=84.25; m[94]=83.875; m[95]=73.75; m[96]=74.667; m[97]=87.792; m[98]=61.417; m[99]=64.542; m[100]=83.125; m[101]=75.708; m[102]=85.75; m[103]=86.833; m[104]=70.833; m[105]=72.958; m[106]=64.458; m[107]=80.667; m[108]=76.0; m[109]=68.125; m[110]=68.333; m[111]=67.875; m[112]=80.042; m[113]=76.5; m[114]=72.458; m[115]=83.375; m[116]=84.667; m[117]=69.583; m[118]=75.25; m[119]=61.375; m[120]=77.917; m[121]=67.75; m[122]=61.0; m[123]=66.75; m[124]=94.417; m[125]=96.583; m[126]=86.583; m[127]=75.167; m[128]=71.167; m[129]=75.292; m[130]=76.75; m[131]=83.417; m[132]=72.708; m[133]=76.167; m[134]=61.042; m[135]=68.0; m[136]=65.958; m[137]=80.583; m[138]=83.25; m[139]=79.208; m[140]=80.042; m[141]=85.25; m[142]=73.917; m[143]=64.833; m[144]=93.458; m[145]=84.417; m[146]=70.917; m[147]=85.083; m[148]=74.5; m[149]=70.083; m[150]=69.042; m[151]=50.417; m[152]=63.33; m[153]=57.458; m[154]=57.583; m[155]=68.75; m[156]=68.875; m[157]=83.333; m[158]=80.0; m[159]=92.042; m[160]=78.833; m[161]=83.833; m[162]=86.083; m[163]=85.333; m[164]=63.375; m[165]=56.25; m[166]=87.958; m[167]=81.625; m[168]=77.958; m[169]=70.25; m[170]=78.167; m[171]=80.792; m[172]=84.25; m[173]=83.75; m[174]=88.542; m[175]=64.458; m[176]=60.583; m[177]=60.042; m[178]=73.0; m[179]=89.125; m[180]=91.792; m[181]=83.208; m[182]=82.875; m[183]=88.083; m[184]=76.25; m[185]=85.125; m[186]=96.583; m[187]=77.083; m[188]=76.958; m[189]=74.542; m[190]=74.875; m[191]=86.375; m[192]=80.375; m[193]=77.042; m[194]=81.333; m[195]=85.0; m[196]=78.375; m[197]=63.833; m[198]=61.625; m[199]=68.708; m[200]=69.042; m[201]=73.708; m[202]=77.0; m[203]=74.75; m[204]=69.667; m[205]=81.792; m[206]=82.833; m[207]=77.042; m[208]=83.125; m[209]=83.958; m[210]=76.125; m[211]=78.625; m[212]=84.375; m[213]=78.792; m[214]=83.667; m[215]=76.125; m[216]=78.625; m[217]=84.375; m[218]=78.792; m[219]=83.667; m[220]=89.125; m[221]=90.25; m[222]=76.042; m[223]=81.792; m[224]=68.833; m[225]=65.708; m[226]=71.792; m[227]=76.542; m[228]=70.292; m[229]=78.417; m[230]=81.625; m[231]=75.0; m[232]=85.333; m[233]=77.333; m[234]=62.208; m[235]=67.917; m[236]=80.167; m[237]=88.625; m[238]=86.708; m[239]=82.0; m[240]=71.375; m[241]=77.083; m[242]=89.333; m[243]=85.333; m[244]=75.583; m[245]=90.458; m[246]=79.083; m[247]=82.583; m[248]=74.958; m[249]=85.542; m[250]=88.0; m[251]=86.25; m[252]=85.25; m[253]=71.708; m[254]=78.458; m[255]=80.833; m[256]=82.583; m[257]=71.458; m[258]=72.708; m[259]=72.542; m[260]=74.583; m[261]=89.625; m[262]=91.792; m[263]=89.0; m[264]=71.0; m[265]=64.75; m[266]=78.125; m[267]=86.167; m[268]=81.917; m[269]=82.0; m[270]=81.5; m[271]=81.958; m[272]=86.0; m[273]=70.917; m[274]=65.958; m[275]=85.167; m[276]=85.375; m[277]=85.167; m[278]=79.292; m[279]=79.208; m[280]=89.417; m[281]=78.958; m[282]=84.548; m[283]=85.625; m[284]=86.292; m[285]=90.25; m[286]=84.833; m[287]=88.917; m[288]=74.25; m[289]=88.5; m[290]=86.583; m[291]=83.208; m[292]=87.042; m[293]=86.792; m[294]=79.125; m[295]=70.125; m[296]=54.5; m[297]=64.333; m[298]=90.958; m[299]=89.542; m[300]=84.917; m[301]=85.667; m[302]=87.875; m[303]=89.917; m[304]=90.583; m[305]=82.625; m[306]=92.455; m[307]=92.875; m[308]=95.375; m[309]=80.792; m[310]=93.458; m[311]=86.333; m[312]=76.708; m[313]=78.875; m[314]=91.667; m[315]=95.75; m[316]=87.792; m[317]=92.0; m[318]=85.375; m[319]=90.25; m[320]=86.833; m[321]=91.458; m[322]=90.708; m[323]=93.417; m[324]=88.917; m[325]=92.739; m[326]=94.75; m[327]=80.958; m[328]=59.125; m[329]=69.542; m[330]=79.417; m[331]=71.75; m[332]=81.583; m[333]=90.625; m[334]=87.333; m[335]=83.208; m[336]=86.042; m[337]=88.548; m[338]=91.542; m[339]=88.875; m[340]=86.458; m[341]=84.375; m[342]=82.167; m[343]=82.917; m[344]=85.75; m[345]=59.042; m[346]=69.625; m[347]=80.667; m[348]=82.625; m[349]=85.542; m[350]=92.25; 
S[0]=1019.563; S[1]=1016.183; S[2]=1008.575; S[3]=1001.025; S[4]=1020.625; S[5]=1019.533; S[6]=1019.729; S[7]=1019.729; S[8]=1013.917; S[9]=1014.013; S[10]=1007.975; S[11]=1019.917; S[12]=1011.304; S[13]=1011.971; S[14]=1011.442; S[15]=1008.308; S[16]=1018.013; S[17]=1024.167; S[18]=1015.838; S[19]=1025.129; S[20]=1033.629; S[21]=1022.496; S[22]=1016.413; S[23]=1021.85; S[24]=1010.158; S[25]=1010.438; S[26]=1013.025; S[27]=1010.213; S[28]=998.392; S[29]=991.458; S[30]=997.475; S[31]=993.617; S[32]=993.738; S[33]=988.542; S[34]=997.3; S[35]=1001.233; S[36]=1017.2; S[37]=1015.304; S[38]=1027.154; S[39]=1022.238; S[40]=1009.183; S[41]=977.85; S[42]=980.913; S[43]=988.717; S[44]=1001.45; S[45]=1014.542; S[46]=1019.738; S[47]=1005.283; S[48]=999.175; S[49]=1004.592; S[50]=1005.138; S[51]=1013.138; S[52]=1008.288; S[53]=1003.171; S[54]=1003.17; S[55]=993.883; S[56]=1002.4; S[57]=994.246; S[58]=984.767; S[59]=988.929; S[60]=1000.813; S[61]=1001.979; S[62]=993.108; S[63]=996.967; S[64]=1000.183; S[65]=1001.663; S[66]=1004.8; S[67]=1004.867; S[68]=1007.092; S[69]=1014.663; S[70]=1011.646; S[71]=1004.967; S[72]=991.554; S[73]=990.792; S[74]=997.046; S[75]=1004.867; S[76]=1007.092; S[77]=1014.663; S[78]=1011.646; S[79]=1004.967; S[80]=991.554; S[81]=990.792; S[82]=997.046; S[83]=1015.288; S[84]=1022.429; S[85]=1014.988; S[86]=1022.358; S[87]=1017.4; S[88]=1018.529; S[89]=1022.108; S[90]=1029.108; S[91]=1038.583; S[92]=1036.179; S[93]=1034.692; S[94]=1029.596; S[95]=1019.604; S[96]=1019.561; S[97]=1020.625; S[98]=1022.213; S[99]=1008.067; S[100]=998.421; S[101]=995.717; S[102]=1016.896; S[103]=1031.083; S[104]=1031.238; S[105]=1025.342; S[106]=1028.258; S[107]=1015.704; S[108]=1022.167; S[109]=1025.9; S[110]=1013.763; S[111]=1001.142; S[112]=1007.9; S[113]=1006.483; S[114]=1003.704; S[115]=1012.875; S[116]=1017.75; S[117]=1020.683; S[118]=1026.679; S[119]=1028.829; S[120]=1019.708; S[121]=1005.788; S[122]=1004.338; S[123]=1006.892; S[124]=1009.504; S[125]=1002.829; S[126]=1007.358; S[127]=1010.221; S[128]=1004.888; S[129]=1003.075; S[130]=1008.817; S[131]=1013.825; S[132]=1012.438; S[133]=1012.829; S[134]=1014.188; S[135]=1014.4; S[136]=1012.829; S[137]=1010.596; S[138]=1001.783; S[139]=1006.492; S[140]=1007.729; S[141]=1012.629; S[142]=1010.967; S[143]=1008.146; S[144]=1009.125; S[145]=1012.217; S[146]=1012.246; S[147]=1019.496; S[148]=1022.608; S[149]=1023.608; S[150]=1021.013; S[151]=1016.6; S[152]=1022.0; S[153]=1030.929; S[154]=1028.346; S[155]=1025.492; S[156]=1026.421; S[157]=1022.196; S[158]=1021.975; S[159]=1022.65; S[160]=1016.596; S[161]=1009.021; S[162]=1002.608; S[163]=996.592; S[164]=999.725; S[165]=1009.154; S[166]=1009.742; S[167]=1015.496; S[168]=1013.054; S[169]=1014.713; S[170]=1018.521; S[171]=1018.867; S[172]=1013.688; S[173]=1013.288; S[174]=1014.096; S[175]=1010.867; S[176]=1010.996; S[177]=1011.904; S[178]=1014.646; S[179]=1015.196; S[180]=1018.721; S[181]=1024.771; S[182]=1026.425; S[183]=1022.417; S[184]=1013.267; S[185]=1009.663; S[186]=1008.338; S[187]=1002.063; S[188]=1002.029; S[189]=1005.263; S[190]=1010.904; S[191]=1011.313; S[192]=1005.388; S[193]=1002.988; S[194]=1007.767; S[195]=1009.054; S[196]=1012.429; S[197]=1008.775; S[198]=1011.383; S[199]=1018.842; S[200]=1018.346; S[201]=1016.567; S[202]=1013.763; S[203]=1011.654; S[204]=1016.65; S[205]=1020.304; S[206]=1018.529; S[207]=1012.9; S[208]=1012.483; S[209]=1012.413; S[210]=1011.183; S[211]=1007.938; S[212]=1008.304; S[213]=1013.904; S[214]=1015.938; S[215]=1011.246; S[216]=1009.663; S[217]=1010.308; S[218]=1010.125; S[219]=1015.483; S[220]=1013.583; S[221]=1009.624; S[222]=1009.358; S[223]=1009.358; S[224]=1017.154; S[225]=1024.254; S[226]=1026.983; S[227]=1024.0; S[228]=1020.188; S[229]=1020.482; S[230]=1023.179; S[231]=1023.25; S[232]=1019.013; S[233]=1016.496; S[234]=1016.817; S[235]=1016.654; S[236]=1014.45; S[237]=1011.25; S[238]=1008.838; S[239]=1010.804; S[240]=1014.396; S[241]=1011.179; S[242]=1008.588; S[243]=1008.225; S[244]=1008.225; S[245]=1008.225; S[246]=1008.246; S[247]=1003.063; S[248]=1002.458; S[249]=1009.129; S[250]=1005.246; S[251]=1007.946; S[252]=1009.971; S[253]=1017.071; S[254]=1016.867; S[255]=1014.733; S[256]=1014.95; S[257]=1012.183; S[258]=1011.804; S[259]=1015.617; S[260]=1013.962; S[261]=1012.221; S[262]=1009.104; S[263]=1016.617; S[264]=1014.771; S[265]=1016.854; S[266]=1021.254; S[267]=1023.313; S[268]=1013.913; S[269]=1018.221; S[270]=1023.863; S[271]=1022.538; S[272]=1023.067; S[273]=1017.163; S[274]=1012.767; S[275]=1007.063; S[276]=1004.533; S[277]=1003.3; S[278]=1000.2; S[279]=1006.533; S[280]=1013.996; S[281]=1017.993; S[282]=1017.229; S[283]=1012.421; S[284]=1012.979; S[285]=1011.154; S[286]=1002.529; S[287]=1007.067; S[288]=1013.133; S[289]=1012.038; S[290]=1015.288; S[291]=1015.775; S[292]=1015.025; S[293]=1015.421; S[294]=1013.171; S[295]=1013.738; S[296]=1019.042; S[297]=1018.154; S[298]=1004.046; S[299]=1011.104; S[300]=1018.629; S[301]=1009.263; S[302]=1002.808; S[303]=1005.204; S[304]=1007.208; S[305]=1010.433; S[306]=1007.642; S[307]=1006.825; S[308]=1009.5; S[309]=1008.925; S[310]=1011.533; S[311]=1022.521; S[312]=1019.167; S[313]=1009.533; S[314]=1014.092; S[315]=1020.863; S[316]=1021.125; S[317]=1022.55; S[318]=1025.075; S[319]=1023.504; S[320]=1029.742; S[321]=1032.621; S[322]=1031.175; S[323]=1025.921; S[324]=1021.621; S[325]=1019.404; S[326]=1017.292; S[327]=1013.45; S[328]=1016.846; S[329]=1016.367; S[330]=1004.658; S[331]=1015.283; S[332]=1022.408; S[333]=1007.658; S[334]=1008.788; S[335]=1014.85; S[336]=1016.088; S[337]=1012.038; S[338]=1013.796; S[339]=1022.488; S[340]=1024.367; S[341]=1019.313; S[342]=1022.121; S[343]=1026.867; S[344]=1016.786; S[345]=1008.154; S[346]=1010.258; S[347]=1016.529; S[348]=1016.654; S[349]=1019.213; S[350]=1022.054; 


  float timeSec = (timeMsec/1000.0)*1.0;
  float fracttime = fract(timeSec);
  int time = int(timeSec);

  vec3 color = vec3(0.0);
  float a = 1.0;
  
  float kinterp = mix(k[time%348], k[(time+1)%348], fracttime);
  float linterp = mix(l[time%348], l[(time+1)%348], fracttime);
  float minterp = map(mix(m[time%348]*0.1, m[(time+1)%348]*0.1, fracttime),2.44,10.0,0.0,20.0);
  float Sinterp = map(mix(S[time%348], S[(time+1)%348], fracttime),966.783,1024.6,0.0,5.0);
  
  float lines = abs(chladni(p, kinterp , linterp , minterp, Sinterp, 3.0));
  
  if (lines > 0.3)
  {
  discard; 
  }
  
  color = vec3(dot(p, p));

  gl_FragColor = vec4( color*pow(1.0-lines,1.5) , 1.0 );

}

`
});

