

function mix(x, y, a) {
    return x*(1.0-a)+y*a;
}

AFRAME.registerShader('sphere_madona', {
  schema: {
    timeMsec: {type:'time'},
    k: {type:'float'},
    l: {type:'float'},
    m: {type:'float'},
    S: {type:'float'}
  },
  
  uniforms: {
      // the texture value (once the texture source is loaded, update)
      //map: { type: 't', value: null },
      // texture parameters
      timeMsec: {type:'time', is:'uniform'},
      k: {type: 'float', is:'uniform'},
      l: {type: 'float', is:'uniform'},
      m: {type: 'float', is:'uniform'},
      S: {type: 'float', is:'uniform'}
  },

  init: function(data) {
      
      this.material = new THREE.ShaderMaterial({

          uniforms: this.uniforms,
          vertexShader: this.vertexShader,
          fragmentShader: this.fragmentShader
        
      });
    
    this.uniforms.k.value = 0.0;
    this.uniforms.l.value = 0.0;
    this.uniforms.m.value = 0.0;
    this.uniforms.S.value = 0.0;
    
    this.mData = [8.7, 8.8, 9.5, 9.2, 8.0, 9.7, 10.0, 9.8, 8.9, 9.5, 9.3, 9.3, 9.4, 9.4, 8.3, 8.7, 9.7, 9.5, 8.6, 9.0, 8.4, 8.1, 9.4, 8.1, 9.6, 9.9, 9.9, 10.0, 10.0, 9.5, 9.0, 7.8, 8.1, 7.1, 6.5, 9.6, 8.8, 8.8, 9.1, 9.7, 9.4, 9.1, 9.3, 8.4, 6.8, 7.7, 8.9, 8.9, 8.0, 9.0, 8.309, 7.522, 9.5, 9.068, 9.286, 8.89, 8.604, 9.172, 9.582, 9.723, 9.627, 9.255, 8.455, 9.2, 9.045, 8.277, 8.982, 9.25, 8.845, 7.9, 7.55, 8.455, 6.95, 8.318, 6.055, 5.518, 5.855, 6.155, 5.664, 4.818, 5.341, 5.019, 5.829, 3.932, 7.536, 8.659, 6.123, 7.368, 6.255, 6.341, 5.659, 5.368, 7.214, 6.432, 5.273, 5.836, 5.886, 8.559, 8.623, 8.132, 7.341, 6.305, 7.068, 6.564, 7.132, 4.614, 5.545, 6.273, 5.105, 6.786, 6.25, 6.805, 6.936, 6.491, 5.191, 7.15, 7.486, 7.264, 8.486, 5.965, 6.214, 6.8, 5.232, 8.277, 7.309, 7.864, 6.305, 8.323, 8.464, 8.818, 6.505, 6.782, 7.0, 2.44, 7.105, 8.522, 7.25, 5.573, 4.505, 4.55, 4.918, 5.255, 6.723, 7.664, 6.782, 7.164, 6.905, 7.277, 8.659, 8.741, 8.664, 9.432, 6.268, 7.714, 9.641, 8.005, 7.836, 6.668, 6.945, 8.173, 7.695, 6.3, 5.986, 6.214, 6.182, 7.127, 7.986, 8.741, 8.259, 8.118, 7.359, 7.8, 8.568, 7.714, 7.136, 7.541, 8.136, 7.554, 8.136, 9.586, 7.464, 7.627, 7.041, 7.218, 6.95, 6.575, 6.305, 6.491, 7.1, 7.35, 8.318, 8.468, 8.055, 8.923, 8.327, 7.023, 7.805, 7.418, 8.323, 8.336, 9.032, 7.573, 7.559, 7.923, 8.573, 7.836, 7.423, 7.65, 7.659, 9.273, 5.611, 7.536, 7.914, 7.732, 7.714, 7.05, 6.409, 6.955, 6.55, 7.632, 7.595, 8.345, 8.341, 8.505, 9.177, 8.536, 9.143, 7.473, 9.423, 8.941, 8.827, 9.445, 8.523, 8.109, 8.455, 9.336, 9.741, 8.328, 8.459, 8.464, 8.059, 7.25, 8.886, 9.127, 8.459, 8.373, 6.786, 7.5, 8.186, 8.909, 7.645, 8.309, 8.182, 7.727, 7.932, 7.427, 9.314, 8.732, 8.688, 8.477, 8.214, 70855.0, 8.268, 8.614, 8.077, 9.568, 9.323, 8.977, 9.241, 9.636, 8.782, 9.005, 9.095, 9.786, 8.564, 8.068, 8.705, 8.359, 8.745, 9.605, 9.545, 8.877, 9.077, 9.218, 8.841, 9.391, 9.636, 9.8, 9.209, 9.095, 7.968, 9.914, 9.841, 9.932, 8.232, 9.441, 9.141, 9.409, 9.232, 8.868, 8.364, 8.514, 9.114, 9.295, 9.033, 9.883, 9.855, 9.032, 8.094, 9.055, 9.845, 8.809, 9.095, 9.618, 9.445, 9.327, 9.223, 9.632, 9.523, 9.005, 9.259, 8.655, 9.373, 8.364, 5.932, 7.014, 6.868, 7.145, 9.495, 8.773, 8.477, 9.482, 9.732, 9.473, 9.686, 9.768, 9.682, 9.705, 9.363, 9.985, 9.709, 9.65, 9.436, 9.295, 8.586, 9.231, 9.195, 9.824]
    this.kData = [0.22, 3.65, 1.4, 1.541, -1.158, -1.095, 0.895, 1.3, 3.233, 1.775, 0.204, 2.17, 2.841, 2.112, 5.245, 2.812, -0.875, 2.504, 2.483, 4.529, 1.758, 0.141, 4.337, 3.075, 3.075, 1.941, 1.67, -1.67, -0.129, 1.025, 0.058, 2.266, 4.858, 0.92, -3.05, -3.729, -1.358, -3.141, 0.97, 1.554, 2.283, 2.19, 1.25, 1.412, 0.054, 0.116, 2.72, 7.658, 4.708, 3.391, 3.475, 2.437, 3.075, 3.454, 2.495, -1.212, 0.608, -0.771, -0.642, 2.596, 3.588, 3.613, 4.488, 2.779, 1.229, 1.75, 3.088, 4.068, 3.913, 4.454, 4.317, 2.857, 3.688, 6.075, 5.767, 2.229, -1.254, -2.167, -2.667, -1.342, 2.746, 3.917, 4.079, 7.004, 1.857, -0.646, -0.463, 2.225, 4.152, 5.163, 1.654, 2.763, 6.283, 9.125, 8.137, 5.646, 4.613, 4.475, 5.127, 7.621, 0.846, 2.921, 4.679, 3.442, 4.208, 3.75, 5.767, 5.7, 9.133, 9.025, 8.017, 6.1, 4.463, 5.692, 7.475, 5.058, 4.531, 7.821, 9.958, 11.092, 10.088, 8.433, 12.6, 8.517, 7.992, 9.892, 12.071, 8.463, 3.133, 4.121, 6.317, 4.696, 7.017, 5.613, 7.217, 6.879, 6.972, 14.429, 9.892, 11.094, 14.45, 13.569, 15.313, 14.992, 11.088, 12.125, 11.758, 15.296, 16.871, 18.517, 21.592, 19.058, 18.95, 20.275, 17.5, 16.554, 13.067, 15.796, 18.513, 21.492, 24.1, 21.054, 19.254, 20.05, 19.475, 20.983, 21.479, 22.654, 23.108, 21.467, 20.554, 17.15, 15.724, 16.95, 17.396, 16.871, 18.088, 18.425, 15.821, 14.604, 13.046, 12.388, 16.492, 13.929, 14.883, 14.933, 14.338, 16.414, 18.145, 19.854, 19.788, 19.385, 17.192, 13.363, 11.992, 12.246, 15.888, 15.95, 18.55, 20.983, 14.696, 14.521, 14.892, 15.013, 13.783, 15.858, 18.313, 18.308, 17.667, 19.279, 20.138, 16.691, 17.191, 13.817, 14.371, 17.05, 17.313, 19.579, 18.367, 14.521, 18.163, 16.571, 17.817, 16.35, 18.917, 16.354, 13.979, 13.863, 13.638, 13.2, 10.454, 15.904, 13.142, 12.483, 15.563, 15.321, 13.921, 16.117, 14.542, 11.675, 10.867, 14.796, 12.717, 10.329, 12.096, 13.963, 14.825, 15.725, 16.35, 11.142, 10.079, 11.721, 8.254, 11.092, 13.258, 12.533, 13.95, 14.433, 15.542, 15.213, 12.221, 12.5, 10.079, 6.604, 9.875, 12.888, 14.431, 15.833, 13.446, 8.496, 12.192, 11.521, 9.358, 11.0, 10.117, 7.592, 6.754, 6.138, 4.021, 3.308, 2.779, 3.492, 3.658, 5.2, 9.863, 11.2, 8.383, 7.854, 8.121, 11.146, 8.8, 9.908, 8.233, 7.525, 6.813, 5.721, 7.558, 6.271, 7.313, 9.888, 8.992, 6.708, 1.175, 3.767, 3.846, 3.825, 2.429, 1.579, 1.654, 1.487, 2.15, 6.958, 8.504, 2.016, 2.242, 2.625, 5.038, 3.629, 6.983, 3.508, 1.025, 1.013, -0.75, -0.55, 0.079, -2.233, -1.413, 0.208, 1.829, 1.1, -2.954, -5.883, -5.621, -4.475, -1.688, -2.329, -2.75, -1.913, -1.071, -0.038, 3.529, 1.625, 3.95, 1.179, -0.133, 1.029, -0.058, -1.329, -2.133, -1.65, 0.563 ]
    this.SData = [999.67, 996.504, 991.87, 982.15, 1000.116, 1004.654, 1005.104, 999.058, 996.912, 995.25, 994.895, 999.279, 995.195, 999.279, 995.196, 1000.2, 1009.691, 1003.354, 1008.587, 1014.32, 1000.654, 993.25, 1001.825, 990.216, 990.45, 995.32, 994.795, 988.995, 981.641, 980.308, 970.65, 976.437, 985.025, 997.787, 993.866, 1006.983, 1003.879, 997.729, 968.104, 966.783, 973.883, 984.575, 998.491, 1006.083, 994.983, 984.321, 988.329, 990.025, 997.291, 997.016, 989.941, 975.52, 982.108, 982.995, 973.691, 975.858, 981.945, 988.391, 981.166, 984.804, 988.321, 991.008, 989.712, 992.05, 993.704, 998.562, 999.17, 992.641, 976.916, 975.26, 998.0, 1004.766, 1000.545, 998.879, 1003.545, 1009.35, 1020.566, 1024.6, 1021.675, 1018.912, 1019.05, 1015.679, 1003.639, 999.556, 1002.637, 1005.2, 989.808, 982.416, 978.687, 998.633, 1013.266, 1016.325, 1010.262, 1000.912, 982.858, 986.983, 986.645, 981.029, 990.233, 996.275, 1000.625, 1007.612, 1010.783, 1009.108, 1000.12, 988.183, 184.683, 988.62, 992.825, 987.283, 988.387, 996.666, 995.758, 989.9, 992.154, 997.946, 996.508, 991.779, 993.812, 998.495, 996.041, 995.775, 985.287, 987.716, 991.995, 994.654, 994.812, 991.491, 992.062, 993.316, 996.141, 997.883, 1004.128, 1001.175, 1004.3, 1007.02, 1006.275, 1003.733, 1005.154, 1000.308, 994.412, 987.187, 985.24, 986.8, 995.654, 994.85, 994.85, 998.466, 998.883, 998.558, 1001.004, 1004.72, 1004.075, 999.095, 998.995, 998.901, 997.983, 998.733, 1000.8, 1000.258, 1002.766, 1008.708, 1011.537, 1008.783, 1000.508, 994.058, 992.837, 985.023, 987.8, 990.904, 995.366, 997.054, 992.295, 988.825, 992.208, 993.841, 997.087, 996.151, 995.55, 1002.516, 1001.441, 1000.375, 998.383, 996.871, 1000.295, 1004.587, 1003.845, 998.908, 994.804, 993.833, 994.258, 994.233, 993.9, 1001.045, 1001.452, 997.341, 993.47, 994.587, 992.887, 997.695, 998.554, 995.558, 994.437, 1000.137, 1009.433, 1011.745, 1009.433, 1005.981, 1006.2, 1006.804, 1003.641, 1001.529, 1001.008, 999.908, 998.512, 997.258, 994.7, 994.7, 997.6, 1001.412, 1001.041, 994.037, 993.22, 990.295, 986.856, 992.283, 994.375, 993.425, 992.77, 1001.15, 1002.325, 998.7, 996.858, 1001.079, 995.825, 989.504, 1000.929, 1001.8, 999.141, 1003.312, 1007.133, 999.945, 993.058, 1001.845, 1003.85, 1006.97, 1001.87, 997.42, 995.491, 993.8, 993.345, 992.937, 997.441, 1000.529, 1003.687, 1002.3, 1000.752, 1002.808, 1003.012, 997.566, 999.341, 993.945, 996.358, 1000.175, 999.775, 1003.012, 1000.333, 999.483, 999.475, 998.558, 996.629, 1001.625, 1002.416, 986.808, 991.08, 991.108, 1001.683, 997.879, 988.562, 988.345, 991.757, 997.05, 998.125, 995.92, 997.02, 997.02, 1006.383, 1007.412, 1000.441, 1000.075, 1000.075, 1006.475, 1002.787, 1002.379, 1006.837, 1004.716, 1012.591, 1016.15, 1016.452, 1013.712, 1010.525, 1006.875, 1006.879, 1005.606, 1007.075, 1002.116, 991.204, 997.7, 1007.55, 992.041, 989.77, 995.916, 998.529, 996.625, 993.77, 1003.837, 1007.395, 1002.454, 1008.983, 1014.387, 1006.25, 1001.579, 1003.95, 1009.675, 1012.004, 1011.97, 1011.85, 1007.145, 1001.47, 1001.09, 1001.962, 1002.7, 1004.625, 1000.55, 1006.091, 1004.141, 1006.091, 1004.141, 1006.033, 1009.804, 1009.295, 1002.7, 992.308, 989.35, 984.537, 991.645, 998.225, 994.3, 986.625, 989.662, 992.241]
    this.lData = [18.75, 18.75, 19.375, 16.25, 12.291, 10.0, 11.041, 18.333, 13.75, 6.875, 24.375, 10.208, 13.125, 19.16, 18.125, 12.708, 12.916, 12.5, 21.666, 23.95, 22.708, 15.41, 14.5, 16.041, 8.33, 11.666, 9.588, 1.875, 4.583, 10.208, 17.083, 16.458, 12.291, 12.916, 23.75, 16.875, 10.416, 15.416, 20.833, 15.208, 10.833, 11.875, 7.916, 11.041, 21.458, 30.416, 21.25, 17.5, 8.958, 24.791, 21.875, 19.166, 7.916, 10.833, 5.41, 13.125, 9.583, 13.125, 5.833, 4.583, 10.0, 5.833, 2.5, 5.625, 1.875, 6.458, 8.75, 17.708, 21.739, 14.286, 20.0, 22.229, 9.667, 18.979, 15.354, 3.25, 10.667, 12.813, 9.854, 5.833, 8.043, 23.783, 11.88, 10.563, 19.125, 27.667, 13.188, 13.583, 8.042, 14.0, 20.521, 14.292, 21.417, 15.375, 18.958, 20.229, 18.583, 27.938, 22.771, 21.083, 17.438, 11.208, 9.417, 15.458, 17.104, 15.458, 17.104, 15.792, 15.333, 13.042, 12.625, 9.667, 17.771, 7.729, 10.771, 9.833, 7.354, 6.0, 10.333, 23.042, 22.896, 10.542, 6.333, 5.104, 12.458, 16.0, 12.833, 16.458, 11.313, 18.208, 11.833, 19.479, 7.979, 22.944, 4.286, 5.208, 5.0, 6.05, 15.229, 22.167, 25.042, 16.229, 16.354, 10.021, 6.729, 9.958, 13.208, 8.917, 9.313, 6.104, 10.229, 12.146, 12.146, 18.063, 11.75, 8.125, 3.438, 5.917, 5.042, 5.396, 9.063, 11.708, 5.813, 5.875, 3.271, 3.083, 4.833, 4.438, 5.208, 6.0, 12.042, 15.146, 7.438, 9.125, 9.5, 11.0, 12.417, 10.938, 9.854, 8.396, 5.292, 14.217, 7.417, 7.938, 8.042, 7.292, 7.938, 8.042, 7.292, 5.875, 6.523, 4.354, 4.021, 4.438, 4.021, 4.438, 8.896, 13.396, 10.5, 8.354, 10.583, 5.063, 3.813, 4.438, 10.104, 13.958, 9.979, 12.458, 2.875, 3.208, 3.417, 8.229, 5.438, 8.708, 1.813, 0.227, 12.727, 7.864, 5.208, 4.521, 5.042, 9.271, 12.167, 4.542, 8.375, 5.083, 6.604, 9.625, 7.542, 8.104, 5.833, 7.063, 8.467, 10.958, 5.979, 8.833, 6.25, 6.458, 10.958, 6.604, 5.792, 8.854, 7.313, 6.354, 11.25, 13.917, 18.0, 7.688, 9.333, 15.896, 13.563, 7.917, 7.188, 24.375, 25.542, 14.708, 7.979, 8.375, 9.917, 6.229, 7.521, 6.167, 8.583, 9.604, 6.25, 5.146, 8.771, 8.125, 7.646, 8.271, 13.417, 12.063, 10.146, 3.854, 7.604, 9.771, 6.875, 5.958, 7.042, 10.104, 21.271, 11.458, 10.021, 2.625, 9.729, 18.125, 11.417, 5.958, 16.938, 15.375, 8.131, 6.688, 10.438, 16.333, 9.521, 7.229, 3.75, 8.063, 5.25, 14.0, 11.104, 10.25, 18.271, 16.75, 14.0, 12.333, 6.833, 4.563, 4.563, 8.021, 11.042, 7.875, 10.417, 15.033, 14.938, 18.542, 23.667, 15.974, 12.771, 17.688, 18.875, 11.75, 8.604, 14.104, 12.083, 15.438, 14.729, 9.771, 11.208, 7.854, 11.688, 21.167, 20.292, 20.208, 16.417, 9.021, 9.604, 8.854, 6.354, 13.833, 8.521, 3.792, 9.646, 13.667, 8.604, 11.375, 10.167, 12.313, 14.583, 14.208]
  },
                               



  update: function (data) {
    //console.log(data.something)

      //AFRAME.utils.material.updateMap(this, data);
    
       var timeSec = (data.timeMsec/1000.0)*1.0;
       var fracttime = timeSec%1;
       var time = Math.trunc(timeSec);
    
       this.uniforms.timeMsec.value = data.timeMsec;
       this.uniforms.k.value = mix(this.kData[time%350],this.kData[(time+1)%350],fracttime);
       this.uniforms.l.value = mix(this.lData[time%350],this.lData[(time+1)%350],fracttime);
       this.uniforms.m.value = mix(this.mData[time%350],this.mData[(time+1)%350],fracttime);
       this.uniforms.S.value = mix(this.SData[time%350],this.SData[(time+1)%350],fracttime);

     
   },

  
  vertexShader: `


varying vec3 p;


void main() {
  p = vec3(vec4(position,1.0));
  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

}

`,
  fragmentShader: `

//varying float noise;
varying vec3 p;
const float PI = 3.14159;
uniform float timeMsec, k, l, m, S;

float map(float value, float min1, float max1, float min2, float max2)
{
  // Convert the current value to a percentage
  // 0% - min1, 100% - max1
  float perc = (value - min1) / (max1 - min1);

  // Do the same operation backwards with min2 and max2
  return perc * (max2 - min2) + min2;
}

float chladni(vec3 pos, float k,float l,float m,float s,float L)
{

return cos(k*pos.x*PI/L)*(cos(l*pos.y*PI/L)*cos(m*pos.z*PI/L)+s*cos(m*pos.y*PI/L)*cos(l*pos.z*PI/L))+
       cos(l*pos.x*PI/L)*(cos(k*pos.y*PI/L)*cos(m*pos.z*PI/L)+s*cos(m*pos.y*PI/L)*cos(k*pos.z*PI/L))+
       cos(m*pos.x*PI/L)*(cos(k*pos.y*PI/L)*cos(l*pos.z*PI/L)+s*cos(l*pos.y*PI/L )*cos(k*pos.z*PI/L));// where k, l and m are integers, s=∓ 1.
}


void main() {



  vec3 color = vec3(0.0);
  float a = 1.0;
  
  float kinterp = k;
  float linterp = l;
  float minterp = map(m *0.15,2.44,10.0,0.0,20.0);
  float Sinterp = map(S,966.783,1024.6,0.0,5.0);
  
  float lines = abs(chladni(p, kinterp , linterp , minterp, Sinterp, 3.0));
  
  if (lines > 0.3)
  {
  discard; 
  }
  
  color = vec3(dot(p, p));

  gl_FragColor = vec4( color*pow(1.0-lines,1.5) , 1.0 );

}

`
});

